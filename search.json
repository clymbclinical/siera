[{"path":"https://clymbclinical.github.io/siera/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 siera authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://clymbclinical.github.io/siera/articles/ARD_script_structure.html","id":"my-ard-program-has-been-auto-generated-what-can-i-expect","dir":"Articles","previous_headings":"","what":"My ARD program has been auto-generated: What can I expect?","title":"ARD program structure","text":"auto-generated ARD program (one generated output) follows logical structure linked ARS model. script contains code analyses related output, follows code pattern analysis (except first analysis, handles “big N” calculation convention). analysis-level ARD generated analysis, end program, analysis-level ARDs appended create one output-level ARD. Keep mind code sections auto-populated ARS metadata. can visualized follows:","code":"# Section 1: Program header  # Section 2: Load libraries  # Section 3: Load ADaM datasets  # Section 4a (first Analysis): Code to calculate results as an ARD  # Section 4b (subsequent Analyses): Code to calculate results as an ARD  # Section 5: Append Analysis-level ARDs"},{"path":"https://clymbclinical.github.io/siera/articles/ARD_script_structure.html","id":"analysis-level-code-to-calculate-ards","dir":"Articles","previous_headings":"My ARD program has been auto-generated: What can I expect?","what":"Analysis-level code to calculate ARDs","title":"ARD program structure","text":"analysis related output follows logical structure based ARS model create analysis-level ARD. structure follows:","code":""},{"path":"https://clymbclinical.github.io/siera/articles/ARD_script_structure.html","id":"step-1-apply-analysis-set-to-adams","dir":"Articles","previous_headings":"My ARD program has been auto-generated: What can I expect? > Analysis-level code to calculate ARDs","what":"Step 1: Apply “Analysis Set” to ADaM(s)","title":"ARD program structure","text":"step applies Analysis Set assigned output (e.g. Safety Population) ADaM dataset(s). case “big N” count based another dataset (like ADSL) main ADaM (e.g. ADAE), two separate datasets created downstream use subsequent analyses. Example: Note: done first Analysis, assigned subsequent analyses, since dataset(s) remain remainder program’s analyses.","code":"overlap <- intersect(names(ADSL), names(ADAE)) overlapfin <- setdiff(overlap, 'USUBJID')   df_pop <- dplyr::filter(ADSL,             SAFFL == 'Y') |>             merge(ADAE |> dplyr::select(-dplyr::all_of(overlapfin)),                   by = 'USUBJID',                   all = FALSE)  df_poptot = dplyr::filter(ADSL,             SAFFL == 'Y')"},{"path":"https://clymbclinical.github.io/siera/articles/ARD_script_structure.html","id":"step-2-apply-data-subset","dir":"Articles","previous_headings":"My ARD program has been auto-generated: What can I expect? > Analysis-level code to calculate ARDs","what":"Step 2: Apply “Data Subset”","title":"ARD program structure","text":"Based resulting dataset step 1, data subsetting applied relevant current analysis (e.g. filtering serious, treatment-related Adverse Events). data subsetting required analysis, simple assignment previous dataset done ‘filter’ statement. step convention starting dataframe name “df2”, followed AnalysisId.","code":"df2_An07_03_SerTEAE_Summ_ByTrt <- df_pop |>         dplyr::filter(TRTEMFL == 'Y' & AESER == 'Y')"},{"path":"https://clymbclinical.github.io/siera/articles/ARD_script_structure.html","id":"step-3-apply-method","dir":"Articles","previous_headings":"My ARD program has been auto-generated: What can I expect? > Analysis-level code to calculate ARDs","what":"Step 3: Apply “Method”","title":"ARD program structure","text":"step takes subsetted dataset, applies required AnalysisMethod (e.g. counting subjects treatment group, like RACE). explained vignette using cards cardx, functions packages applied handle statistical operations analysis. Typically, pre-work done dataset passing cards cardx function. function applied, result analysis-level ARD. end step, record-level metadata ARS model also merged ARD, ensure ability trace result back ARS metadata. See example :","code":"# intermediate step: Prepare Denominator Dataset for `cards` function denom_dataset = df2_An01_05_SAF_Summ_ByTrt |>   dplyr::select(TRT01A)  # intermediate step: Prepare input dataset for `cards` function in_data = df2_An03_05_Race_Summ_ByTrt |>   dplyr::distinct(TRT01A, RACE, USUBJID) |>   dplyr::mutate(dummy = 'dummyvar')  # pass calculate subjects counts and % (based on big N) grouped by treatment and race cards::ard_categorical(   data = in_data,   by = c('TRT01A', 'RACE'),   variables = 'dummy',   denominator = denom_dataset)      # select relevant statistics as defined by the Method, and assign operation Ids df3_An03_05_Race_Summ_ByTrt <- df3_An03_05_Race_Summ_ByTrt|>   dplyr::filter(stat_name %in% c('n', 'p')) |>   dplyr::mutate(operationid = dplyr::case_when(stat_name == 'n' ~ 'Mth01_1_n',                                                stat_name == 'p' ~ 'Mth01_2_pct'))  # add ARS metadata IDs to the dataset to enable tracing each result back to ARS metadata df3_An03_05_Race_Summ_ByTrt <- df3_An03_05_Race_Summ_ByTrt |>   dplyr::mutate(AnalysisId = 'An03_05_Race_Summ_ByTrt',                 MethodId = 'Mth01',                 OutputId = 'Out14-1-1')"},{"path":"https://clymbclinical.github.io/siera/articles/ARD_script_structure.html","id":"final-steps","dir":"Articles","previous_headings":"My ARD program has been auto-generated: What can I expect?","what":"Final steps","title":"ARD program structure","text":"process repeats Analysis, although code step course vary (defined specific ARS metadata Analysis). Analysis ARD created, ARDs appened create output-level ARD. See example :","code":"# combine analyses to create ARD ---- ARD <- dplyr::bind_rows(df3_An01_05_SAF_Summ_ByTrt,  df3_An03_01_Age_Summ_ByTrt,  df3_An03_01_Age_Comp_ByTrt,  df3_An03_02_AgeGrp_Summ_ByTrt,  df3_An03_02_AgeGrp_Comp_ByTrt,  df3_An03_03_Sex_Summ_ByTrt,  df3_An03_03_Sex_Comp_ByTrt,  df3_An03_04_Ethnic_Summ_ByTrt,  df3_An03_04_Ethnic_Comp_ByTrt,  df3_An03_05_Race_Summ_ByTrt,  df3_An03_05_Race_Comp_ByTrt,  df3_An03_06_Height_Summ_ByTrt,  df3_An03_06_Height_Comp_ByTrt)"},{"path":"https://clymbclinical.github.io/siera/articles/ARD_script_structure.html","id":"example","dir":"Articles","previous_headings":"My ARD program has been auto-generated: What can I expect?","what":"Example","title":"ARD program structure","text":"Examples ARD script shipped package. examples, Summary Demographics: ARD_Out14-1-1.R Overall Summary Treatment-Emergent Adverse Events: ARD_Out14-3-1-1.R Access functions: ARD can used various ways downstream. Read vignette utilising ARDs.","code":"# see location of script: ARD_script_example(\"ARD_Out14-1-1.R\") ARD_script_example(\"ARD_Out14-3-1-1.R\") # open script to inspect: file.edit(ARD_script_example(\"ARD_Out14-1-1.R\")) file.edit(ARD_script_example(\"ARD_Out14-3-1-1.R\")) # run script locally: source(ARD_script_example(\"ARD_Out14-1-1.R\")) source(ARD_script_example(\"ARD_Out14-3-1-1.R\"))"},{"path":"https://clymbclinical.github.io/siera/articles/Getting_started.html","id":"reading-in-ars-metadata---what-to-expect","dir":"Articles","previous_headings":"","what":"Reading in ARS metadata - what to expect","title":"Getting Started","text":"ARS metadata contains ARS information Reporting Event. information includes: mainListOfContents (links outputs respective analyses) otherListsOfContents (contains Output metadata) dataSubsets (filters data individual analyses) analysisSets (filters data get Population Set Output) analysisGroupings (groups data according analysis specifications) analyses (contains linking information components required calculation results) methods (describes operations performed data get results)","code":""},{"path":"https://clymbclinical.github.io/siera/articles/Getting_started.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Getting Started","text":"readARS function reads completed ARS metadata file, generates R scripts Output defined file. example can done using ready--use ARS metadata Excel file (note meant example. Official ARS metadata json format, can also passed readARS function): now 5 R scripts (named ARD_Out14-1-1.R, ARD_Out14-3-1-1.R, ARD_Out14-3-2-1.R, ARD_Out14-3-3-1a.R, ARD_Out14-3-3-1b.R) folder specified output_folder. can execute 5 R scripts -(assuming ADaM required script available ADaM_folder), result ARD (one result per row format) scripts.","code":"# Path to the Excel ARS metadata file:  ARS_path <- ARS_example(\"Common_Safety_Displays_cards.xlsx\")  # Path to a folder which will contain the Output meta-programmed R scripts (recommended to update # to a more suitable local path) output_folder <- tempdir()  # Path to the folder containing ADaM datasets in csv format (we will use temporary  # directory tempdir() to make the code run in this vignette, but it's recommended to  # 1. download the ADaMs required (csv ADSL and ADAE available using e.g. ARS_example(\"ADSL.csv\")) # 2. store it in a folder (the directly downloaded location can be found using dirname(ARS_example(\"ADSL.csv\")), for example.  Use this location, or manually store the ADaM somewhere else) # 3. use the folder path instead of tempdir() below. ADaM_folder <- tempdir()  # run the readARS function with these 3 parameters.  This creates R scripts  # (1 for each Output in output_folder) readARS(ARS_path, output_folder, ADaM_folder)"},{"path":"https://clymbclinical.github.io/siera/articles/Getting_started.html","id":"running-a-auto-generated-ard-script","dir":"Articles","previous_headings":"Example","what":"Running a auto-generated ARD script","title":"Getting Started","text":"structure auto-generated ARD script discussed ARD structure vignette. Examples auto-generated ARD scripts included package, can used using ARD_script_example function. Running script look like : ARD object result appending analysis-level ARD (created cards cardx functions) output. can used (re-used) downstream various applications. See vignette next step utilising ARD - like creating Tables, using QC.","code":"# Step 1: open ARD_xxx.R file # Step 2: Confirm the location of ADaM dataset(s) is correct in the code section \"Load ADaM\".   # For the sake of simplicity, the only update made to the ARD_Out14-1-1.R script was to point to the ADaM folder to ARS_example(\"ADSL.csv\") # Step 3: Run the code and enjoy automated analysis results generation.  # Note: the ARD is contained in the object \"ARD\" (which contains the appended) mini-ARDs from all individual Analyses ARDs.  example_ARD_script = ARD_script_example(\"ARD_Out14-1-1.R\") source(example_ARD_script) head(ARD) #>   group1 group1_level group2 group2_level variable variable_level stat_name #> 1   <NA>                <NA>                TRT01A        Placebo         n #> 2   <NA>                <NA>                TRT01A      Xanomeli…         n #> 3   <NA>                <NA>                TRT01A      Xanomeli…         n #> 4 TRT01A      Placebo   <NA>                   AGE                        N #> 5 TRT01A      Placebo   <NA>                   AGE                     mean #> 6 TRT01A      Placebo   <NA>                   AGE                       sd #>   stat_label   stat #> 1          n     86 #> 2          n     84 #> 3          n     84 #> 4          N     86 #> 5       Mean 75.209 #> 6         SD   8.59"},{"path":"https://clymbclinical.github.io/siera/articles/Getting_started.html","id":"a-note-on-example-code-used-in-analysismethodcodetemplate-using-cards-package","dir":"Articles","previous_headings":"","what":"A note on example code used in AnalysisMethodCodeTemplate: using cards package","title":"Getting Started","text":"powerful aspect ARS model, dynamic code can supplied part metadata evaluated either 1. Output level, 2. Analysis level, 3. AnalysisMethod level (information , see PHUSE paper). latter case implemented making use AnalysisMethodCodeTemplate AnalysisMethodCodeParameters classes metadata. user supplies dynamic R code (option making use parameters referring metadata pieces), executed perform relevant AnalysisMethod operations. case example, cards cardx R packages used. See information vignette using cards cardx.","code":""},{"path":"https://clymbclinical.github.io/siera/articles/apply-ARD.html","id":"using-ards-options","dir":"Articles","previous_headings":"","what":"Using ARDs: Options","title":"What do I do with my ARD?","text":"Analysis Results Dataset (ARD) multiple uses. Consisting machine-readable results (opposed static RTF PDF results), examples ARD use cases : QC datasets re-using results different outputs, e.g. figures tables re-using results various reporting events creating final TFLs","code":""},{"path":"https://clymbclinical.github.io/siera/articles/apply-ARD.html","id":"downstream-r-packages-for-table-creation","dir":"Articles","previous_headings":"Using ARDs: Options","what":"Downstream R packages for table creation","title":"What do I do with my ARD?","text":"Two reputable R packages, part pharmaverse ARD-first approach creating tables: tfrmt gtsummary presentations delivered posit::conf 2025 packages: tfrmt gtsummary","code":""},{"path":"https://clymbclinical.github.io/siera/articles/using-cards.html","id":"introduction-to-cardscardx","dir":"Articles","previous_headings":"","what":"Introduction to cards/cardx","title":"Making use of `cards` and `cardx`","text":"cards cardx reputable R packages, part pharmaverse, wrap statistical procedures deliver Analysis Results Datasets (ARDs). Read cards , cardx .","code":""},{"path":"https://clymbclinical.github.io/siera/articles/using-cards.html","id":"using-cards-and-cardx-in-ars-metadata","dir":"Articles","previous_headings":"","what":"Using cards and cardx in ARS metadata","title":"Making use of `cards` and `cardx`","text":"powerful aspect ARS model, dynamic code can supplied part metadata evaluated either 1. Output level, 2. Analysis level, 3. AnalysisMethod level. insightful insightful PHUSE paper Richard Marshall , explains dynamic code can ‘drive’ automation ARS model categorising 5 “geARS”. “Gear 5” entails making use AnalysisMethodCodeTemplate AnalysisMethodCodeParameters classes metadata. user supplies dynamic R code (option making use parameters referring metadata pieces), executed perform relevant AnalysisMethod operations.","code":""},{"path":"https://clymbclinical.github.io/siera/articles/using-cards.html","id":"example-ard_continuous","dir":"Articles","previous_headings":"Using cards and cardx in ARS metadata","what":"Example: ard_continuous","title":"Making use of `cards` and `cardx`","text":"siera package, R code used AnalysisMethodCodeTemplate aligned cards cardx package. simple example function ard_continuous cards package used AnalysisMethodCodeTemplate class: example AnalysisMethodCodeTemplate code particular AnalysisMethod (summary statistics continuous variable), ard_continuous function cards package used. Notice, however, two parameters used code: ‘byvariables_here’, ‘analysisvariable_here’. example placeholder names, replaced actual variables, depending context Analysis. example, ‘byvariables_here’ replaced TRT01A, ‘analysisvariable_here’ replaced AGE, ARD summary statistics AGE Treatment. code, however, reused summary statistics e.g. HEIGHT another Analysis, ‘analysisvariable_here’ replaced HEIGHT. dynamically applied within readARS() function generating R scripts using siera. Let’s see, example, statement auto-populated actual objects (ARS metadata): order facilitate use placeholders replacement actual values metadata, several “constructs” defined readARS function, available user call AnalysisMethodCodeTemplate AnalysisMethodCodeParameters classes metadata. constructs either simple variables datasets defined metadata, complex, dynamic constructs various metadata pieces, inserted specific cards functions, pre-processing steps. list defined constructs examples shipped package, can accessed :","code":"# example of 'cards' code in AnalysisMethodCodeTemplate, using the ard_continuous function:  Analysis_ARD = ard_continuous(   data = filtered_ADSL,   by = c(byvariables_here),   variables = analysisvariable_here ) # example of 'cards' code in AnalysisMethodCodeTemplate, populated with AnalysisMethodCodeParameters:  Analysis_ARD = ard_continuous(   data = filtered_ADSL,   by = c(TRT01A),   variables = AGE ) ARS_example(\"cards_constructs.xlsx\")"},{"path":"https://clymbclinical.github.io/siera/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Malan Bosman. Author, maintainer. Clymb Clinical. Copyright holder, funder.","code":""},{"path":"https://clymbclinical.github.io/siera/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bosman M (2025). siera: Generate Analysis Results Programmes Using ARS Metadata. R package version 0.5.4, https://clymbclinical.github.io/siera/.","code":"@Manual{,   title = {siera: Generate Analysis Results Programmes Using ARS Metadata},   author = {Malan Bosman},   year = {2025},   note = {R package version 0.5.4},   url = {https://clymbclinical.github.io/siera/}, }"},{"path":[]},{"path":"https://clymbclinical.github.io/siera/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Generate Analysis Results Programmes Using ARS Metadata","text":"siera, users ingest Analysis Results Standard (ARS) metadata auto-generate R scripts , run corresponding ADaM datasets, provide Analysis Results Datasets (ARDs). CDISC Analysis Results Standard foundational standard facilitates automation, reproducibility, reusability traceability analysis results data. ARS metadata officially represented using JSON format (though also Excel representation easier readability, JSON format recommended official ARS usage). JSON file contains relevant metadata able calculate Analysis Results specific Reporting Event. metadata includes (limited ): Analysis Sets (e.g. SAFFL = “Y”) AnalysisGroupings (e.g. group Treatment) DataSubsets (e.g. filter Treatment-Emergent Adverse Events) AnalysisMethods (e.g. calculate ‘n’, ‘Mean’, ‘Min’, ‘Max’) Applying concepts ADaM input data, yields Analysis Results Dataset format (ARDs).","code":""},{"path":"https://clymbclinical.github.io/siera/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Analysis Results Programmes Using ARS Metadata","text":"siera can installed CRAN : development version can installed Github using","code":"install.packages(\"siera\") devtools::install_github(\"clymbclinical/siera\")"},{"path":"https://clymbclinical.github.io/siera/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Generate Analysis Results Programmes Using ARS Metadata","text":"siera package one main function, called readARS. function takes ARS metadata input (either JSON xlsx format), makes use various metadata pieces populate R scripts, run -produce ARDs. One R script created output (table) defined ARS metadata reporting event. order make use function, following required arguments: functional ARS file, representing ARS Metadata Reporting Event (JSON xlsx) output directory R scripts placed folder containing related ADaM datasets ARDs generated See Getting Started vignette examples detail process.","code":""},{"path":"https://clymbclinical.github.io/siera/index.html","id":"more-info","dir":"","previous_headings":"Usage","what":"More info:","title":"Generate Analysis Results Programmes Using ARS Metadata","text":"US Connect 2025 paper","code":""},{"path":"https://clymbclinical.github.io/siera/reference/ARD_script_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to example ARD scripts, auto-generated by siera — ARD_script_example","title":"Get path to example ARD scripts, auto-generated by siera — ARD_script_example","text":"siera comes bundled example ARD-producing scripts `inst/script` directory. function make easy access.","code":""},{"path":"https://clymbclinical.github.io/siera/reference/ARD_script_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to example ARD scripts, auto-generated by siera — ARD_script_example","text":"","code":"ARD_script_example(path = NULL)"},{"path":"https://clymbclinical.github.io/siera/reference/ARD_script_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to example ARD scripts, auto-generated by siera — ARD_script_example","text":"path Name R file. `NULL`, example files listed.","code":""},{"path":"https://clymbclinical.github.io/siera/reference/ARD_script_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to example ARD scripts, auto-generated by siera — ARD_script_example","text":"list example R files (path NULL), file path used.","code":""},{"path":"https://clymbclinical.github.io/siera/reference/ARD_script_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to example ARD scripts, auto-generated by siera — ARD_script_example","text":"","code":"ARD_script_example() #> [1] \"ARD_Out14-1-1.R\"   \"ARD_Out14-3-1-1.R\" ARD_script_example(\"ARD_Out14-1-1.R\") #> [1] \"/home/runner/work/_temp/Library/siera/script/ARD_Out14-1-1.R\""},{"path":"https://clymbclinical.github.io/siera/reference/ARS_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Get path to ARS example files — ARS_example","title":"Get path to ARS example files — ARS_example","text":"siera comes bundled example files `inst/extdata` directory. function make easy access.","code":""},{"path":"https://clymbclinical.github.io/siera/reference/ARS_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get path to ARS example files — ARS_example","text":"","code":"ARS_example(path = NULL)"},{"path":"https://clymbclinical.github.io/siera/reference/ARS_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get path to ARS example files — ARS_example","text":"path Name file. `NULL`, example files listed.","code":""},{"path":"https://clymbclinical.github.io/siera/reference/ARS_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get path to ARS example files — ARS_example","text":"list example files (path NULL), file path used.","code":""},{"path":"https://clymbclinical.github.io/siera/reference/ARS_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get path to ARS example files — ARS_example","text":"","code":"ARS_example() #>  [1] \"ADAE.csv\"                          \"ADSL.csv\"                          #>  [3] \"ADVS.csv\"                          \"ADZSDER.csv\"                       #>  [5] \"Common_Safety_Displays_cards.xlsx\" \"cards_constructs.xlsx\"             #>  [7] \"exampleARS_1.json\"                 \"exampleARS_1a.json\"                #>  [9] \"exampleARS_2.json\"                 \"exampleARS_2.xlsx\"                 #> [11] \"exampleARS_2a.xlsx\"                \"exampleARS_3.json\"                 #> [13] \"test_cards.json\"                   ARS_example(\"Common_Safety_Displays_cards.xlsx\") #> [1] \"/home/runner/work/_temp/Library/siera/extdata/Common_Safety_Displays_cards.xlsx\""},{"path":"https://clymbclinical.github.io/siera/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://clymbclinical.github.io/siera/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://clymbclinical.github.io/siera/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://clymbclinical.github.io/siera/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://clymbclinical.github.io/siera/reference/readARS.html","id":null,"dir":"Reference","previous_headings":"","what":"Ingest ARS (Analysis Results Standard) metadata, produce ARD (Analysis Results Dataset) code for each output — readARS","title":"Ingest ARS (Analysis Results Standard) metadata, produce ARD (Analysis Results Dataset) code for each output — readARS","text":"Ingest ARS (Analysis Results Standard) metadata, meta-programme R scripts run -produce Analysis Results Datasets ingesting ADaM datasets","code":""},{"path":"https://clymbclinical.github.io/siera/reference/readARS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ingest ARS (Analysis Results Standard) metadata, produce ARD (Analysis Results Dataset) code for each output — readARS","text":"","code":"readARS(   ARS_path,   output_path = tempdir(),   adam_path = tempdir(),   spec_output = \"\" )"},{"path":"https://clymbclinical.github.io/siera/reference/readARS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ingest ARS (Analysis Results Standard) metadata, produce ARD (Analysis Results Dataset) code for each output — readARS","text":"ARS_path file containing ARS metadata reporting event output_path Path store .R ARD scripts adam_path Path folder containing ADaM datasets, run ARD program spec_output output ID specific output run metadata","code":""},{"path":"https://clymbclinical.github.io/siera/reference/readARS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ingest ARS (Analysis Results Standard) metadata, produce ARD (Analysis Results Dataset) code for each output — readARS","text":"R programmes generating ARDs - one output (analysis output) specified ARS metadata","code":""},{"path":"https://clymbclinical.github.io/siera/reference/readARS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ingest ARS (Analysis Results Standard) metadata, produce ARD (Analysis Results Dataset) code for each output — readARS","text":"","code":"# path to file containing ARS metadata  ARS_path <- ARS_example(\"Common_Safety_Displays_cards.xlsx\")  # output path for R programs output_dir = tempdir()  # folder containing ADaM datasets adam_folder = tempdir()  # run function, write to temp directory readARS(ARS_path, output_dir, adam_folder)"},{"path":"https://clymbclinical.github.io/siera/news/index.html","id":"siera-054","dir":"Changelog","previous_headings":"","what":"siera 0.5.4","title":"siera 0.5.4","text":"CRAN release: 2025-09-25 Comprehensive testing added: checking generated ARD result values added warning messages cli() cover scenarios bigN vs table-level subsetting","code":""},{"path":"https://clymbclinical.github.io/siera/news/index.html","id":"siera-053","dir":"Changelog","previous_headings":"","what":"siera 0.5.3","title":"siera 0.5.3","text":"CRAN release: 2025-08-28 Cover scenario multi-value DataSubsets Cover scenario overlapping variables ADSL merge","code":""},{"path":"https://clymbclinical.github.io/siera/news/index.html","id":"siera-052","dir":"Changelog","previous_headings":"","what":"siera 0.5.2","title":"siera 0.5.2","text":"CRAN release: 2025-08-25 Added conditional operators cover EQ, NE, GE, GT, LE, LT","code":""},{"path":"https://clymbclinical.github.io/siera/news/index.html","id":"siera-050","dir":"Changelog","previous_headings":"","what":"siera 0.5.0","title":"siera 0.5.0","text":"CRAN release: 2025-07-29 readARS function ingest xlsx, json CDISC example","code":""},{"path":"https://clymbclinical.github.io/siera/news/index.html","id":"siera-040","dir":"Changelog","previous_headings":"","what":"siera 0.4.0","title":"siera 0.4.0","text":"CRAN release: 2025-07-18 addition readARS_xl function example added {cards} AnalysisMethodCodeTemplate","code":""},{"path":"https://clymbclinical.github.io/siera/news/index.html","id":"siera-030","dir":"Changelog","previous_headings":"","what":"siera 0.3.0","title":"siera 0.3.0","text":"CRAN release: 2025-03-03 dynamic recognition ADaMs","code":""},{"path":"https://clymbclinical.github.io/siera/news/index.html","id":"siera-010","dir":"Changelog","previous_headings":"","what":"siera 0.1.0","title":"siera 0.1.0","text":"CRAN release: 2025-02-10 Initial CRAN submission.","code":""}]
